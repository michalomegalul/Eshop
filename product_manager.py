from db_connect import connect_db

def create_product(name, description, price, stock_quantity, category_id):
    conn = connect_db()
    if conn:
        cur = conn.cursor()
        cur.execute(
            """
            INSERT INTO products (name, description, price, stock_quantity, category_id)
            VALUES (%s, %s, %s, %s, %s) RETURNING id
            """,
            (name, description, price, stock_quantity, category_id)
        )
        product_id = cur.fetchone()[0]  # Extract created ID
        conn.commit()
        cur.close()
        conn.close()
        return product_id
    else:
        return None
#     CREATE TABLE "categories" (
#   "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "name" varchar,
#   "parent_id" integer,
#   "created_at" timestamp DEFAULT (now()),
#   "updated_at" timestamp DEFAULT (now())
# );
def create_category(name):
    conn = connect_db()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute(
                """
                INSERT INTO categories (name)
                VALUES (%s) RETURNING id
                """,
                (name,)
            )
            category_id = cur.fetchone()[0]  # Extract created ID
            conn.commit()
            return category_id
        except Exception as e:
            print(f"Error creating category: {e}")
        finally:
            cur.close()
            conn.close()
    else:
        print("Connection to database failed")
        return None

def fetch_products():
    conn = connect_db()
    products = []
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("SELECT id, name, description, price, stock_quantity, category_id FROM products WHERE stock_quantity > 0")
            product_rows = cur.fetchall()
            for row in product_rows:
                product = {
                    'id': row[0],
                    'name': row[1],
                    'description': row[2],
                    'price': row[3],
                    'stock_quantity': row[4],
                    'category_id': row[5],
                    'image_url': 'party-dog.png'  # Set a default image URL
                }
                products.append(product)
        except Exception as e:
            print(f"Error fetching products: {e}")
        finally:
            cur.close()
            conn.close()
    return products
    
def add_user(username, first_name, last_name, email, telephone, password_hash, role):
    conn = connect_db()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute(
                """
                INSERT INTO users (username, first_name, last_name, email, telephone, password_hash, role)
                VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id
                """,
                (username, first_name, last_name, email, telephone, password_hash, role)
            )
            user_id = cur.fetchone()[0]
            conn.commit()
            return user_id
        except Exception as e:
            print(f"Error adding user: {e}")
        finally:
            cur.close()
            conn.close()
    else:
        print("Connection to database failed")
        return None

def add_address(user_id, address_line1, address_line2, city, postal_code, country):
    conn = connect_db()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute(
                """
                INSERT INTO user_addresses (user_id, address_line1, address_line2, city, postal_code, country)
                VALUES (%s, %s, %s, %s, %s, %s) RETURNING id
                """,
                (user_id, address_line1, address_line2, city, postal_code, country)
            )
            address_id = cur.fetchone()[0]
            conn.commit()
            return address_id
        except Exception as e:
            print(f"Error adding address: {e}")
        finally:
            cur.close()
            conn.close()
    else:
        print("Connection to database failed")
        return None

def add_payment_method(user_id, payment_type, provider, account_no, expiry):
    conn = connect_db()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute(
                """
                INSERT INTO user_payment_methods (user_id, payment_type, provider, account_no, expiry)
                VALUES (%s, %s, %s, %s, %s) RETURNING id
                """,
                (user_id, payment_type, provider, account_no, expiry)
            )
            payment_method_id = cur.fetchone()[0]
            conn.commit()
            return payment_method_id
        except Exception as e:
            print(f"Error adding payment method: {e}")
        finally:
            cur.close()
            conn.close()
    else:
        print("Connection to database failed")
        return None

    conn = connect_db()
    products = []
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                SELECT p.id, p.name, p.description, p.price, p.stock_quantity, p.category_id, i.filepath 
                FROM products p
                LEFT JOIN images i ON p.id = i.product_id
                WHERE p.stock_quantity > 0
            """)
            product_rows = cur.fetchall()
            for row in product_rows:
                products.append({
                    'id': row[0],
                    'name': row[1],
                    'description': row[2],
                    'price': row[3],
                    'stock_quantity': row[4],
                    'category_id': row[5],
                    'image_url': row[6] or 'default-image.png'  # Provide a default if NULL
                })
        except Exception as e:
            print(f"Error fetching products with images: {e}")
        finally:
            cur.close()
            conn.close()
    return products